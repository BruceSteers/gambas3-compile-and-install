#!/usr/bin/env bash

# Script to ensure the fantastic Gambas3 basic can be compiled on various linux disrtros it supports.

Version="2.5.1"
# Written by Bruce steers

# Run this Script from terminal.
# By default the script tries to detect the linux version running. If not working you can
# un-comment (delete the '#') one of the lines below depending on the linux version you have.


#BUILD="ubuntu-latest"
#BUILD="debian-stable"
#BUILD="archlinux"
#BUILD="alpine"
#BUILD="raspbian"

#BUILD="archlinux-clang"

#BUILD="debian-oldstable"
#BUILD="debian-testing"
#BUILD="debian-unstable"

#BUILD="ubuntu-eoan"
#BUILD="ubuntu-xenial"
#BUILD="ubuntu-trusty"



# =============  Do not edit below here =============

DISTLIST=("debian-stable" "debian-oldstable" "debian-testing" "debian-unstable" "raspbian" "ubuntu-latest"
"ubuntu-eoan" "ubuntu-xenial" "ubuntu-trusty" "archlinux" "archlinux-clang" "alpine")
LOG="$HOME/gambas-compile-install.log"

AskDistro() {
beep
CNT=0
clear
echo -e "\n Please select from the list below what best descripes your linux or press Ctrl-C to exit..\n"
while [ $CNT -lt ${#DISTLIST[@]} ]; do

echo "- $CNT: ${DISTLIST[$CNT]}"
((CNT++))
done
echo -en "\nType the number that best matches your linux: "
read REPLY
if [ -z "$REPLY" ]; then ErrorOut ""; fi
BUILD=${DISTLIST[$REPLY]}
GetDistro "force"
}

CheckDistro() {
CNT=0; FOUNDDISTRO="no"
while [ $CNT -lt ${#DISTLIST[@]} ]; do
if [ "${DISTLIST[$CNT]}" = "$BUILD" ]; then FOUNDDISTRO="yes"; return; fi
((CNT++))
done
}

GetDistro() {
if [ "$1" != "force" ]; then
if [ ! -z "$BUILD" ]; then return; fi
LINUXNAME=$(lsb_release -is); LINUXNAME=${LINUXNAME,,}
else
LINUXNAME="$BUILD"
fi

LINUXVER=$(lsb_release -rs); LINUXVER=${LINUXVER%%.*}

if [ "$LINUXNAME" = "linuxmint" ]; then LINUXNAME="ubuntu"; TRUENAME="Linuxmint"; ISMINT="yes"; fi
if [ "$LINUXNAME" = "raspbian" ]; then LINUXNAME="debian"; TRUENAME="Raspian"; RASPI="yes"; fi
if [ "$LINUXNAME" = "manjarolinux" ]; then LINUXNAME="archlinux"; TRUENAME="ManjaroLinux"; RASPI="yes"; fi

if [ "$LINUXNAME" = "ubuntu" ]; then
 if [ $LINUXVER -le 14 ]; then LINUXNAME="ubuntu-trusty"
 elif [ $LINUXVER -le 16 ]; then LINUXNAME="ubuntu-xenial"
 elif [ $LINUXVER -le 19 ]; then LINUXNAME="ubuntu-eoan"
 else
 LINUXNAME="ubuntu-latest"
 fi
fi
if [ "$LINUXNAME" = "debian" ]; then
 if [ $LINUXVER -lt 10 ]; then LINUXNAME="debian-oldstable"
 elif [ $LINUXVER -eq 11 ]; then LINUXNAME="debian-testing"
 elif [ $LINUXVER -gt 11 ]; then LINUXNAME="debian-unstable"
 else
 LINUXNAME="debian-stable"
 fi
fi
BUILD=$LINUXNAME
if [ "$LINUXNAME" = "alpine" ]; then INSTALLCOM="apk add --no-progress -q"
elif [[ "$LINUXNAME" = "archlinux"* ]]; then INSTALLCOM="pacman -Syu --needed --noconfirm"
else
INSTALLCOM="apt-get install -y"
fi
BUILDNAME="$BUILD"
if [ ! -z "$TRUENAME" ]; then BUILDNAME="$BUILD ($TRUENAME)"; fi

CheckDistro
if [ "$FOUNDDISTRO" = "no" ]; then AskDistro; return; fi
echo -ne "Auto-detected linux system type for compiling Gambas3..\n
System type '$BUILDNAME'\n\nIf '$BUILDNAME' is NOT your system type 's' to 'Select' your system type or press Ctrl-C to exit and un-comment one of the '#BUILD=name' lines in the begining of this script to manually set your system type.\n(Type s or press return to continue) :"
read ANS
if [ "${ANS,,}" = "s" ]; then AskDistro; return; fi
}

GetGambasGitDir() {
# Say hi, give info, ask user to select a gambas gitlab dir or download it.
clear
echo -e "\nWelcome to the Bruces Gambas3 compile and install setup script. V$Version\n
This will setup your computer for compiling Gambas3 by cloning the latest version or allowing you to choose an existing clone on your disk, installing the required dependencies, then running through the process of configuring and compiling and installing.
A y/n (yes/no) choice is asked before running all commands\nor 'a' can be typed for 'Yes to All'
To abort press Ctrl-C at any time.\n"

if [ -e ".gitlab-ci.yml" ]; then
REPLY=$(pwd)
echo "Gambas source folder detected as current dir.."
else

ZEN=$(which zenity 2>/dev/null)
if [ -z "$ZEN" ]; then
 echo -ne "\nZenity is needed to enable the 'Browse' feature.\nWould you like to install it? (y/n) :"
 read ANSWER
 if [ "${ANSWER,,}" = "y" ]; then CheckPackage "zenity"; fi
ZEN=$(which zenity 2>/dev/null)
fi
clear
echo -e "A Gambas GitLab clone directory is now needed...\nType 'd' to download from the Gambas website\nOr..."
if [ ! -z "$ZEN" ]; then echo -e "Type 'b' to browse for an existing gambas gitlab clone dir.\nOr..."; fi
echo -n "Type the directory name now: "
read REPLY

if [ -z "$REPLY" ]; then ErrorOut "No input given, aborting."; fi

if [ "${REPLY,,}" = "b" ]; then
REPLY=$(zenity --file-selection --title="Select you Gambas GitLab clone directory" --filename="$HOME/gambas" --directory 2>/dev/null)

if [ -z "$REPLY" ]; then ErrorOut "User Cancelled."; fi

elif [ "${REPLY,,}" = "d" ]; then
clear
echo -en "\nDownload option has been chosen. you have 4 choices..\n
* Use 'git' to clone the latest 'stable' version. (recomended)\n* Use 'git' to clone the latest 'beta' gambas.
* Use 'curl' do download the latest 'stable' archive and unpack it.\n* Use 'curl' do download the latest 'beta' archive and unpack it.
\nType 'gs' or 'gb' for git stable or git beta.\nType 'cs' or 'cb' to curl stable or curl beta.
\nOr just press return for git stable. : "
read RPLY

  if [ "${REPLY,,}" = "cs" ]; then DLMODE="c"; DLTYPE="s"
elif [ "${REPLY,,}" = "cb" ]; then DLMODE="c"; DLTYPE="b"
elif [[ "${REPLY,,}" = "gs" ]] || [[ -z $REPLY ]]; then DLMODE="g"; DLTYPE="s"
elif [ "${REPLY,,}" = "gb" ]; then DLMODE="g"; DLTYPE="b"
fi

if [ "$DLMODE" = "g" ]; then
CheckPackage "git"

echo -en "\nEnter name for downloaded folder or press return for 'gambas' in the current dir.\n$(pwd)/gambas\n(You may also give an alternative path, eg. $HOME/Downloads/gambas-main)\nName: "
read REPLY
if [ -z "$REPLY" ]; then REPLY="gambas"; fi
 if [ "$DLTYPE" = "s" ]; then
 git clone --depth=1 -b stable https://gitlab.com/gambas/gambas.git "$REPLY"
 else
 git clone --depth=1 https://gitlab.com/gambas/gambas.git "$REPLY"
 fi
 if [ $? -ne 0 ]; then ErrorOut "git cloning download failed"; fi
ISNEW="yes"

else  # DLMODE curl
CheckPackage "curl"
echo -en "\nEnter name for downloaded folder or press return for\n
default 'gambas-stable' or 'gambas-main' in current dir.\n$(pwd)/gambas\n(You may also give an alternative path, eg. $HOME/Downloads/gambas-main)\nName: "
read REPLY
if [ -z "$REPLY" ]; then 
REPLY="$(pwd)/gambas"; 
if [ DLTYPE = "b" ]; then REPLY="$REPLY-main"; else REPLY="$REPLY-stable"; fi
fi

DLDIR="${REPLY%/*}"
 if [ "$DLTYPE" = "b" ]; then 
  DLFILE="https://gitlab.com/gambas/gambas/-/archive/master/gambas-master.zip"
 else 
  DLFILE="https://gitlab.com/gambas/gambas/-/archive/stable/gambas-stable.zip"
 fi
ANAME="${DLFILE##*/}"
NNAME="${REPLY##*/}"
echo "Downloading '$DLFILE' to '$DLDIR/$ANAME'"
VitalCommand "curl '$DLFILE' -o '$DLDIR/$ANAME'"

cd "$DLDIR"
VitalCommand "unzip -o -q '$ANAME'"

ANAME="${ANAME%.*}"
NNAME="${NNAME%.*}"
if [ "$ANAME" != "$NNAME" ]; then mv "$DLDIR/$ANAME" "$DLDIR/$NNAME"; fi
NEWREPLY="$NNAME"
ISNEW="yes"
fi
fi

if [ ! -z "$NEWREPLY" ]; then REPLY="$NEWREPLY"; fi

echo "Working in directory '$REPLY'"
cd "$REPLY"

if [ ! -e ".gitlab-ci.yml" ]; then
ErrorOut "Error, Dir '$REPLY' is not a Gambas GitLab clone!\nThis script will only work on a true gitlab clone
un unpacked archive does not contain the required data.\nCannot continue on this dir."
fi

fi  # end if asking for gambas dir.

clear
echo -e "\n Okay, Working in the following directory...\n'$REPLY'\n\nA Gambas3 Version $(cat ./VERSION) source dir."

if [ ! "$ISNEW" = "yes" ]; then
 Ask "Run 'git pull' to check for recent commits?"
 if [ "${ANSWER,,}" = "y" ]; then
  CheckPackage "git"
 git pull 2>/dev/null
 if [ $? -ne 0 ]; then echo "git pull failed to update, continuing with current version"; fi
sleep 1
clear
 fi
fi

TEXT=$(cat ./.gitlab-ci.yml)
TIFS=$IFS
IFS=$'\n'
 read -d '£' -a TARY <<< $TEXT£
CNT=0; MODE="search"; BSCRIPT=""
IFS=$TIFS

while [ $CNT -lt ${#TARY[@]} ]; do

TRIMED=$(echo ${TARY[$CNT]##*( )})
# echo "$TRIMED"
if [ "$MODE" = "search" ]; then  # go through file looking for our dist

 if [ "$TRIMED" = "build:$BUILD:" ]; then
 STATE="dist $BUILD found, looking for install commands"
 MODE="getlines"
 BUILDFOUND="yes"
 fi

elif [ "$MODE" = "getlines" ]; then
 if [ "$TRIMED" = "- >" ]; then
  STATE="found install commands, reading..."
  MODE="readlines"
 fi

elif [ "$MODE" = "readlines" ]; then
 if [ ! -z "$TRIMED" ]; then
  if [ "$TRIMED" = "script:" ]; then
  BSCRIPT=$(echo ${BSCRIPT##*( )})
  STATE="commands listed, looking for configure line..."
  MODE="getconfigure"
  else
  if [[ "$TRIMED" = *"&&"* ]]; then TRIMED=${TRIMED##*&& }; fi
  # if [[ "$TRIMED" = "pacman"* ]]; then TRIMED="pacman -S --noconfirm"; fi
  BSCRIPT="$BSCRIPT $TRIMED"
  fi
 fi

elif [ "$MODE" = "getconfigure" ]; then
 if [[ "$TRIMED" = *"./configure"* ]]; then
 CONFIG="${TRIMED##*./configure }"

 if [ "$RASPI" = "yes" ]; then
  RemovePackage "qtwebengine5-dev"
  DisableInConf "qt5webview"
 fi
 RemovePackage "git"
 STATE="ok"
 return
 fi
fi
((CNT++))
done
}

DisableInConf() {
if [[ "$CONFIG " != *"--disable-$1 "* ]]; then CONFIG="$CONFIG --disable-$1"; fi
}

RemovePackage() {
if [[ " $BSCRIPT " = *" $1 "* ]]; then BSCRIPT=${BSCRIPT%% $1*}${BSCRIPT##*$1}; fi
}

VitalCommand() {
echo -e "\nLog: running command.. @ $(date|awk {'print $4'})\n'$1'\n" >>"$LOG"
eval "$1 2>&1|tee --append '$LOG'"
 if [ $? -ne 0 ]; then ErrorOut "$2"; fi
echo -e "Log: no errors.\n" >>"$LOG"
}

CheckApt() {
if [[ "$INSTALLCOM" = "apt-get"* ]]; then
 if [ "$APTUPDATED" != "yes" ]; then
 VitalCommand "sudo apt-get update" "Updating Apt failed"
 APTUPDATED="yes"
 fi
elif [[ "$INSTALLCOM" = "pacman"* ]]; then
 if [ "$APTUPDATED" != "yes" ]; then
 VitalCommand "sudo pacman -Syu --noconfirm --needed" "Updating database failed"
 APTUPDATED="yes"
 fi
fi
}

CheckPackage() {
if [ ! -z $(which $1 2>/dev/null) ]; then return; fi

CheckApt
if [[ "$INSTALLCOM" = "pacman"* ]]; then
 VitalCommand "sudo pacman -S --color auto --noconfirm --needed $1" "$1 install failed"
else
 VitalCommand "sudo $INSTALLCOM $1" "Install $1 failed"
fi

echo "Package $1 installed\n"
}

Ask () {
if [ "$DONTASK" = "true" ]; then ANSWER="y"; return; fi
echo -ne "\n$1 (y/n/a=yes to all) :"
read ANSWER
if [ "${ANSWER,,}" = "a" ]; then DONTASK="true"; ANSWER="y"; fi
}

ErrorOut() {
echo -e "\nError! $1"
echo -n "Press return to exit."
read
CheckSudo
exit 1
}

CheckSudo() {
SFILES=$(sudo su -c "ls /etc/sudoers.d")
if [[ "$SFILES" = *"g3make_temp"* ]]; then 
sudo su -c "rm /etc/sudoers.d/g3make_temp"
sudo -K
fi
}

ProcessList() {
TIFS=$IFS
read -d "|" -a LARY <<< "$LIST|"
CNT=0 ;
 while [ $CNT -lt ${#LARY[@]} ]; do
  if [[ "$INSTALLCOM" = "apt-get"* ]]; then
   UNINSTALLGB="$UNINSTALLGB ${LARY[$CNT]%%/*}"
  else
   UNINSTALLGB="$UNINSTALLGB ${LARY[$CNT]}"
  fi
 ((CNT++))
 done
}

CheckForRepoGambas() {
echo "checking if is previously installed with package manager..."

if [[ "$INSTALLCOM" = "apt-get"* ]]; then
 LIST=$(apt list gambas3* 2>/dev/null|grep 'installed'|awk {'print $1'})
elif [[ "$INSTALLCOM" = "pacman"* ]]; then
 LIST=$(pacman -Qsq gambas3* 2>/dev/null)
elif [[ "$INSTALLCOM" = "apk"* ]]; then
 echo "apk not done"
fi


if [ -z "$LIST" ]; then
echo "Gambas is not previously installed by a package manager."
sleep 1
return
fi

ProcessList
#clear
echo -en "\nWarning...\n\nThere are ${#LARY[@]} Gambas3 packages previously installed by your package manager and need to be uninstalled before the 'make install' command is executed.
\nNote. Removal of ALL package manager Gambas3 items will not happen untill just before 'make install' and not now so you will still have Gambas3 installed should the compilation process fail.\nPress return to continue: "
read
}

AskToUpSudo() {
clear
echo -ne "Compiling is about to start but can take a long time on slow machines.
If you are not at the keyboard when the 'make install' is run it will sit asking
for your password for a short time then timeout and fail.
The default timeout for sudo is 15 minutes but we can up that temporarily while
compilation is running, this way sudo will not ask you for your password but
'make install' will still run with superuser rights.

Up sudo timeout while the script runs? (y/n) : "
read REPLY
if [ "${REPLY}" = "y" ]; then
sudo su -c 'echo -e "Defaults env_reset, timestamp_timeout=120\nDefaults insults\nDefaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"" >/etc/sudoers.d/g3make_temp'
if [ $? -ne 0 ]; then
echo "unable to up sudo sorry." 
else
echo -e "sudo timeout updated temporarily to 2 hours\n"
sudo false
fi
fi
}

CheckUninstallGambas() {
if [ -z "$UNINSTALLGB" ]; then return; fi
echo "\nUninstalling previous repository version of Gambas3 now."
if [ -z "$DONTASK" ]; then
 echo -en "The repository version of Gambas3 MUST first be removed.\nPress return to remove or Ctrl-C to quit."
 read
fi
if [[ "$INSTALLCOM" = "apt-get"* ]]; then
 VitalCommand "sudo apt-get -y purge gambas3*"
elif [[ "$INSTALLCOM" = "pacman"* ]]; then
 VitalCommand "sudo pacman -R --noconfirm $UNINSTALLGB"
elif [[ "$INSTALLCOM" = "apk"* ]]; then
 echo "apk not done"
fi
}

function ctrl_c() {
echo -en "\n** CTRL-C was pressed, exiting..."
CheckSudo
sleep 1
exit
}

# Main function...
clear
echo -e "gambas-compile-and-install output log $(date)\n" >"$LOG"

trap ctrl_c INT

# auto check distro type if not manually set.

GetDistro

CheckForRepoGambas

# call the function to get the gambas git dir and get the distro specific commands from it.
GetGambasGitDir

if [ "$STATE" != "ok" ]; then
 if [ "$BUILDFOUND" != "yes" ]; then
  echo -e "Could not find distro $BUILD in the data file!\nYou could try Un-Commenting the line that says what version of linux you are using in this script and try again. or select one from this list..."
  AskDistro
  GetGambasGitDir
  else
  ErrorOut "An error occured finding finding the data, Last message was $STATE"
  fi
 fi

AskToUpSudo

echo -e "Dependencies.\n The following packages are needed to compile Gambas and will be installed if not installed already..\n"
DEPS=${BSCRIPT##*$INSTALLCOM }
echo "$DEPS"
Ask "Run package dependency install?"
if [ "${ANSWER,,}" = "y" ]; then
CheckApt
#echo "$BSCRIPT"
if [[ "$INSTALLCOM" = "pacman"* ]]; then
VitalCommand "sudo pacman -S --color auto --needed $DEPS" "Dependency install failed"
else
VitalCommand "sudo $BSCRIPT" "Dependency install failed"
fi
fi
Ask "Run './reconf-all' ?"
if [ "${ANSWER,,}" = "y" ]; then
VitalCommand "./reconf-all" "reconigure failed"
fi
Ask "Run './configure' ?"
if [ "${ANSWER,,}" = "y" ]; then
VitalCommand "./configure $CONFIG" "./configure failed"
fi
Ask "Run 'make' ?"
if [ "${ANSWER,,}" = "y" ]; then
VitalCommand "make" "'make' command failed"
fi

Ask "Run 'make install' ?"
if [ "${ANSWER,,}" = "y" ]; then
CheckUninstallGambas
VitalCommand "sudo make install" "'make install' command failed"
fi
Ask "Install Icon, desktop launcher and menu item?"
if [ "${ANSWER,,}" = "y" ]; then
xdg-icon-resource install --size 48 ./app/desktop/gambas3.png --novendor
xdg-mime install ./app/desktop/gambas3.appdata.xml --novendor

Ask "Install a menu launcher?\n'make install' *should* have installed the menu launcher for Gambas3\nCheck it's there and if not we can retry now."
if [ "${ANSWER,,}" = "y" ]; then
xdg-desktop-menu install ./app/desktop/gambas3.desktop --novendor
xdg-desktop-menu forceupdate
fi

Ask "Install a desktop launcher icon?"
if [ "${ANSWER,,}" = "y" ]; then
xdg-desktop-icon install ./app/desktop/gambas3.desktop --novendor
chmod +x "$(xdg-user-dir)/Desktop/gambas3.desktop"
fi
fi

echo -e "\nInstallation script now completed..."
echo -ne "All seemed to go well and Gambas3 should now compiled and installed correctly\nPress return to exit :"
CheckSudo
read

